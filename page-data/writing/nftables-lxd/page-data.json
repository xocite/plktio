{"componentChunkName":"component---src-templates-blog-template-js","path":"/writing/nftables-lxd","result":{"data":{"markdownRemark":{"html":"<p>I recently had a lot of difficultly working out how to get ufw (the uncomplicated firewall) to work with LXD Linux containers.</p>\n<p>Because of this and me not having a lot of time to dig deep into the tool, I decided to revisit some of my old iptables configs and amend them to work with LXD.  In the process of doing this, I found that Debian Buster actually defaults to using the new nftables filtering mechanism built on top of netfilter.  In this guide, we'll configure a basic firewall with nftables and move over the legacy iptables rules automatically created by LXD.</p>\n<h1>Background</h1>\n<h2>Some disclaimers</h2>\n<p>I do want to note that these rules work for me but are not really any guarantee against being attacked, hacked, monitored, MITMed, or |insert-bad-thing-here|.  For me they act as reasonable defense against basic attacks.  For a really important web facing box I'd recommend placing a CDN in front of it and routing traffic through the CDN or alternatively using something like Argo Tunnel and only allowing connections through Argo.</p>\n<h2>A bit of reading</h2>\n<p>Here are the notes I reviewed before authoring this post.  I think they serve as good background for iptables and can be skipped at your own peril :).  Even though we're using nftables, understanding the legacy framework will be needed to understand your existing rules.</p>\n<p>Looking at the manpage for iptables we have five built-in tables and each of these contain some chains.  These notes are pulled directly from <code class=\"language-text\">man iptables</code> but I felt serve as a good overview of some of these tables.</p>\n<ul>\n<li>\n<p>filter: the default table</p>\n<ul>\n<li>input: for packets destined to local sockets</li>\n<li>forward: for packets being routed through the box</li>\n<li>output: for locally-generated packets</li>\n</ul>\n</li>\n<li>\n<p>nat: consulted when a new packet is encounted</p>\n<ul>\n<li>prerouting: for altering packets as soon as they arrive</li>\n<li>input: for altering packets destined for local sockets</li>\n<li>output: for altering locally-generated packets before routing</li>\n<li>postrouting: for altering packets as they are about to go out</li>\n</ul>\n</li>\n<li>\n<p>mangle: specialised packet alteration</p>\n<ul>\n<li>prerouting: for altering incoming packets before routing</li>\n<li>postrouting: for altering packets being routed through the box</li>\n</ul>\n</li>\n<li>\n<p>raw: configuring exemption from connection tracking</p>\n<ul>\n<li>prerouting: for packets arriving via any network interface)</li>\n<li>postrouting: for packets generated by local processes</li>\n</ul>\n</li>\n<li>\n<p>security: used for mandatory access control rules</p>\n<ul>\n<li>input: for packets coming into the box itself</li>\n<li>output: for altering locally-generated packets before routing</li>\n<li>forward: for altering packets being routed through the box</li>\n</ul>\n</li>\n</ul>\n<p>For command line invocation, we'll be using the following.  The long name is appended to the command line with double dash (--) and the single letter is the abbreviated call with a single dash.  &#x3C;> are required parameters [] are optional.</p>\n<ul>\n<li>append(A) <chain> <rule-specification> add one or more rules to the end of the selected chain</li>\n<li>check(C) <chain> <rule-specification> check whether a rule matching the specification does exist in the selected chain</li>\n<li>insert(I) <chain> [rulenum] <rule-specification> insert one or more rules in the selected chain as the given rule number.  If no rulenum specified, default to rulenum as 1 (inserted at the head/top/front of the chain).</li>\n<li>list(L) [chain] lists the rules</li>\n<li>new-chain(N) <chain> create a new chain</li>\n</ul>\n<h1>Stateful firewall</h1>\n<h2>Goals</h2>\n<ul>\n<li>Protection against port scanning with recent module. /proc/net/xt_recent</li>\n<li>Automatic dropping of repeated attacks from a single IP to a monitored port.</li>\n<li>Work as a NAT gateway for linux container clients.</li>\n</ul>\n<p>More reading: <a href=\"https://wiki.archlinux.org/index.php/Simple_stateful_firewall#Setting_up_a_NAT_gateway\">https://wiki.archlinux.org/index.php/Simple_stateful_firewall#Setting_up_a_NAT_gateway</a></p>\n<h2>Saving an undo state</h2>\n<p>We'll begin by exporting the current state of the firewall and reimport it should we break things.  For most people, there won't be any firewall rules to export.  In that case, we'll simply drop the existing rules as we create them if there are errors.</p>\n<p>If you're logged into a remote box, I recommend you copy the reset rules into a script and schedule it to run in 10 minutes so you don't get logged out :).  </p>\n<h3>Inspect existing rules</h3>\n<p>Note you'll need to also inspect the other tables listed above by appending <code class=\"language-text\">-t &lt;table name&gt;</code> here.  Options are nat, mangle, security, and raw.  You'll likely only have legacy rules.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">iptables-legacy -L</code></pre></div>\n<p>If any rules appear from the above commands, then it's best to export them to a file using the instructions below.</p>\n<h3>Drop existing rules</h3>\n<p>I wouldn't recommend doing this but you can also start from a clean slate.  Don't forget to do this for every table.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">iptables -F\niptables-legacy -F</code></pre></div>\n<h3>Scheduling the import</h3>\n<p>To schedule the import you may either use crontab or create a systemd timer.  I'd recommend an even simpler method: launch a separate tmux or screen instance, execute the below, and detach from the instance.  You may need to create multiple windows for each invocation.  It's a hacky but workable solution.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">screen\n[create a new window] # sleep 600 &amp;&amp; iptables-legacy-restore /root/iptables-legacy.rules\n[create a new window] # sleep 700 &amp;&amp; iptables-nft-restore /root/iptables-nft.rules</code></pre></div>\n<h2>Make the rules persistent</h2>\n<p>We'll install the iptables persistent package so these are applied during each reboot.</p>\n<p><code class=\"language-text\"># apt install iptables-persistent</code></p>\n<h2>Creating the firewall rules</h2>\n<p>We'll perform keep the changes pretty simple. </p>\n<ul>\n<li>We'll drop invalid packets.</li>\n<li>\n<p>We'll blocks packets that originate from private subnets.</p>\n<ul>\n<li>NOTE: Don't do this if you're doing this with your home server that's behind a router.  You'll lock yourself out!  Instead, place these rules on the routers internal interface.</li>\n</ul>\n</li>\n<li>We'll drop new TCP connection that don't have the SYN flag set.</li>\n<li>We'll log rules that are denied.</li>\n<li>We'll accept continuation of existing or related connections.</li>\n<li>We'll create NAT rules for the lxdbr0 interface.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">iptables --table mangle --append PREROUTING --match conntrack --ctstate INVALID --jump DROP\niptables --table mangle --append PREROUTING --match conntrack --ctstate ESTABLISHED,RELATED --jump ACCEPT\niptables --table mangle --append PREROUTING --protocol TCP ! --syn --match conntrack --ctstate NEW --jump DROP\niptables --table mangle --append PREROUTING --source 0.0.0.0/8 --jump DROP \niptables --table mangle --append PREROUTING --source 10.0.0.0/8 --jump DROP \niptables --table mangle --append PREROUTING --source 127.0.0.0/8 ! --in-interface lo --jump DROP\niptables --table mangle --append PREROUTING --source 169.254.0.0/16 --jump DROP \niptables --table mangle --append PREROUTING --source 172.16.0.0/12 --jump DROP \niptables --table mangle --append PREROUTING --source 192.0.2.0/24 --jump DROP \niptables --table mangle --append PREROUTING --source 192.168.0.0/16 --jump DROP \niptables --table mangle --append PREROUTING --source 240.0.0.0/5 --jump DROP \niptables --table mangle --append PREROUTING --source 224.0.0.0/3 -j DROP \niptables --table mangle --append INPUT --match limit --limit 5/min --jump LOG --log-prefix &quot;iptables denied: &quot; --log-level 7</code></pre></div>\n<p>You can see that equivalent nft rules are created with <code class=\"language-text\">nft list ruleset</code>.  TBD is to move that NAT rules created by lxdbr0 over.  Perhaps just creating a normal bridge and referencing it in the LXD configuration is enough.</p>","frontmatter":{"date":"2019-11-15","updated":null,"path":"/writing/nftables-lxd","title":"nftables rules for LXD"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}