{"componentChunkName":"component---src-templates-blog-template-js","path":"/writing/vanity-gpg-keys","webpackCompilationHash":"00a56055d7b748fecd97","result":{"data":{"markdownRemark":{"html":"<p><em>Keywords: gpg, vanity, keypair, nist</em></p>\n<p>Referencing the very useful <a href=\"https://www.gnupg.org/documentation/manuals/gnupg/Unattended-GPG-key-generation.html\">GPG unattended key generation\nguide</a>,\nI wanted to see how easy it would be to generate a key with a specific hash.</p>\n<p>For my initial test, I wanted to make it as simple as possible only using the\ndefault settings.</p>\n<p>Let's start by building the structure of the looping key generation.</p>\n<p>We'll pipe an incrementing counter to sha256sum to calculate the hash.  Using\ngrep, we'll search for a specific vanity key in the last 2 hexadecimal\ncharacters.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#!/bin/bash\n\ni=&quot;0&quot;\nvanity_key=&quot;99&quot;\n\nwhile true; do\n  TIME=`date +%H:%M:%S`\n  if echo -n &quot;$i&quot; | sha256sum --tag | grep -iqE &quot;$vanity_key\\$&quot;; then\n    echo $i\n    break\n  fi\n\n  i=$[$i+1]\ndone</code></pre></div>\n<p>This outputs 109. </p>\n<p>Now that the looping logic works, we'll start writing the key generation\nportion. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">%echo Generating key...\n%no-protection\nKey-Type: default\nSubkey-Type: default\nName-Real: Test User\nName-Email: test.user@domain.tld\nExpire-Date: 0\n%commit\n%echo Key generation complete :)</code></pre></div>\n<p>Unfortunately, this took 34 minutes.  We'll add %transient-key to reduce the\nentropy requirements with the caveat that any key generated this way can't\nactually be used.  Perhaps at a later stage I can use the true random number\ngenerator present on my Nitrokey.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">%echo Generating key...\n%transient-key\n%no-protection\nKey-Type: default\nSubkey-Type: default\nName-Real: Test User\nName-Email: test.user@domain.tld\nExpire-Date: 0\n%commit\n%echo Key generation complete :)</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ time GNUPGHOME=&quot;$(mktemp -d)&quot; gpg --batch --generate-key key_gen\ngpg: keybox &#39;/tmp/tmp.jccfyYaR2R/pubring.kbx&#39; created\ngpg: Generating key...\ngpg: /tmp/tmp.jccfyYaR2R/trustdb.gpg: trustdb created\ngpg: key 7467B1A5706D1A65 marked as ultimately trusted\ngpg: directory &#39;/tmp/tmp.jccfyYaR2R/openpgp-revocs.d&#39; created\ngpg: revocation certificate stored as &#39;/tmp/tmp.jccfyYaR2R/openpgp-revocs.d/EB64E5588879FF739C00DF767467B1A5706D1A65.rev&#39;\ngpg: Key generation complete :)\n\nreal    0m0.434s\nuser    0m0.002s\nsys     0m0.007s</code></pre></div>\n<p>This is much faster.</p>\n<p>Now we can work on parsing the output from gpg.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#!/bin/bash\n\nvanity_key=&quot;99&quot;\n\nwhile true; do\n  TIME=`date +%H:%M:%S`\n  TEMP=$(mktemp -d)\n  GNUPGHOME=$TEMP gpg --batch --quiet --generate-key key_gen\n\tKEY_FINGERPRINT=$(GNUPGHOME=$TEMP gpg --batch --quiet --list-keys --with-colons | grep fpr | head -n1)\n\tif echo -n $KEY_FINGERPRINT | grep -iEq &quot;$vanity_key:\\$&quot;; then \n\t\tGNUPGHOME=$TEMP gpg --list-keys\n\t\tbreak\n\tfi\n\techo Deleting...\n\trm -r $TEMP\ndone</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">gpg: Generating key...\ngpg: key 1EB473A3ADC44699 marked as ultimately trusted\ngpg: Key generation complete :)\n/tmp/tmp.h6wYHFfIu6/pubring.kbx\n-------------------------------\npub   rsa2048 2019-08-10 [SC]\n      2B6692A4EB91FB47AFA87F681EB473A3ADC44699\nuid           [ultimate] Test User &lt;test.user@domain.tld&gt;\nsub   rsa2048 2019-08-10 [E]\n\n\nreal    5m5.063s\nuser    0m4.333s\nsys     0m11.511s</code></pre></div>\n<p>This took five minutes to generate a 2048-bit RSA key that ends in 99 with\nreduced randomness.  Note that it could take longer or shorter depending on the\nlength of the vanity key.</p>\n<p>This is a running on a single CPU core with a benchmark score (<code class=\"language-text\">sysbench --test=cpu run</code>): 1567.26 events per second.</p>\n<p>Next, we'll try to run these scripts so that they use all the cores.</p>\n<p>We'll make a wrapper script that runs these scripts across all available 4 cores.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#!/bin/bash\n./file.sh &amp; \n./file.sh &amp;\n./file.sh &amp; \n./file.sh &amp;\n\nwait\necho &quot;Done.&quot;</code></pre></div>\n<p>And we'll add a check in each loop that searches for a specific file that's\ncreated upon a match.  This will stop all the scripts.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#!/bin/bash\n\nvanity_key=&quot;99&quot;\nSTOPLOCK=&quot;match-found&quot;\n\nwhile true; do\n  if [[ -f &quot;$STOPLOCK&quot; ]]; then\n\t\tbreak\n\tfi\n  TIME=`date +%H:%M:%S`\n  TEMP=$(mktemp -d)\n  GNUPGHOME=$TEMP gpg --batch --quiet --generate-key key_gen\n\tKEY_FINGERPRINT=$(GNUPGHOME=$TEMP gpg --batch --quiet --list-keys --with-colons | grep fpr | head -n1)\n\tif echo -n $KEY_FINGERPRINT | grep -iEq &quot;$vanity_key:\\$&quot;; then \n\t\tGNUPGHOME=$TEMP gpg --list-keys\n\t\ttouch $STOPLOCK\n\t\tbreak\n\tfi\n\techo Deleting...\n\trm -r $TEMP\ndone</code></pre></div>\n<p>Timing the run of the new parallel script gives us:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">real    0m5.852s\nuser    0m0.334s\nsys     0m0.579s</code></pre></div>\n<p>Again, this value depends on the random values used.  Now, let's update the vanity number to be something more difficult to find.  We'll use \"999\".</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">gpg: Key generation complete :)\n/tmp/tmp.I03FUioXup/pubring.kbx\n-------------------------------\npub   rsa2048 2019-08-10 [SC]\n      D1BED2A845408097BD06081F1D10BEB494695999\nuid           [ultimate] Test User &lt;test.user@domain.tld&gt;\nsub   rsa2048 2019-08-10 [E]\n\n[..snip from other processes..]\n\nreal    5m11.555s\nuser    0m17.176s\nsys     0m31.377s</code></pre></div>\n<p>This took a much longer.  One of the limiting factors for doing this for an\nactual key is the available entropy.  Once we remove the %transient-key option\nfrom the key generation file, we'll find this could take days or even months to\nfinish.</p>\n<p>In other post, I'll explore ways to increase entropy so we can generate secure vanity keys.</p>","frontmatter":{"date":"2019-08-10","updated":null,"path":"/writing/vanity-gpg-keys","title":"Vanity GPG keys"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}