{"componentChunkName":"component---src-templates-blog-template-js","path":"/writing/mac-specifics","result":{"data":{"markdownRemark":{"html":"<p>I use a Mac as my main dev box for better or for worse.  I also use a mini-PC for deployments I want accessible to all my devices.  To orchestrate all these devices, I use a combination of <a href=\"https://www.vagrantup.com/intro/index.html\">Vagrant</a>, for virtual machine provisioning, <a href=\"https://www.ansible.com/\">Ansible</a>, for writing playbooks to get the <em>ahem</em> required <em>ahem</em> Docker installed, and <a href=\"https://www.docker.com/\">Docker</a> to handle my containers.  I am also building a local container registry which houses custom builds of various programs.  Of course, all this is run locally by <a href=\"https://github.com/kubernetes/minikube\">minikube</a>, the Kubernetes local cluster.</p>\n<p>It's quite a complicated setup.  I previously used LXD to manage my containers but it's interaction with the system via snapd was difficult to debug.  Therefore, I decided to fully embrace, as Elon puts it, massive spire in the topological map of technological advancements (from this <a href=\"https://www.youtube.com/watch?v=f3lUEnMaiAU\">interview</a>).</p>\n<p>Before installing all these programs, I took some time to look at how services and networking is managed in macOS as I just knew I would run into some configuration problems down the road.</p>\n<h1>Networking</h1>\n<p>Most of macOS networking is sufficiently handled in the System Preferences Networking pane.  For quick terminal look up of the network interfaces, you can use the netstat and ifconfig tools.  On modern distros, these tools are supplanted by <code class=\"language-text\">ss</code> and <code class=\"language-text\">ip</code> respectively.</p>\n<h1>System services</h1>\n<p><a href=\"https://www.launchd.info/\"><code class=\"language-text\">launchd</code></a> manages the daemons, applications, processes, and scripts in macOS.  It's not as powerful as a modern installation of systemd but it just works, so to speak.  Agents and daemons are usually stored in the /Library set of directories: ~/Library for local agents, /Library for global agents, and /System/Library for system agents.</p>\n<p>These directories contain XML files that specify what they want launchd to do for a particular service.  Go ahead and run <code class=\"language-text\">launchctl list</code> to see the list of loaded services.  Like systemctl you can run <code class=\"language-text\">launchctl enable &lt;service&gt;</code> to start something and with <code class=\"language-text\">disable</code> to disable it.</p>\n<p>When I'm troubleshooting problems it can be informative to list all the non-Apple agents with <code class=\"language-text\">launchctl list | grep -v &#39;com.apple&#39;</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">launchctl list | grep -v &#39;com.apple&#39;\nPID     Status  Label\n355     0       com.wacom.DataStoreMgr\n1774    0       com.microsoft.edgemac.Canary.18720\n780     0       com.openssh.ssh-agent\n-       0       com.wireguard.macos.login-item-helper\n-       0       com.microsoft.update.agent\n352     0       com.wacom.wacomtablet\n397     0       com.wireguard.macos.18228\n-       0       com.valvesoftware.steamclean\n598     0       com.vmware.fusion.15568\n372     0       com.manytricks.Moom.13396\n3066    0       com.microsoft.VSCodeInsiders.18956\n781     0       org.mozilla.firefox.15760\n-       0       com.oracle.java.Java-Updater\n1248    0       org.mozilla.thunderbird.15376\n3087    0       com.microsoft.VSCodeInsiders.ShipIt\n1320    0       com.microsoft.onenote.mac.18712</code></pre></div>\n<p>Let's say I want to see the status of VSCode -- I can use the gui service specifier.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">launchctl print gui/501/com.microsoft.VSCodeInsiders.ShipIt\ncom.microsoft.VSCodeInsiders.ShipIt = {\n\tactive count = 1\n\tpath = (submitted by Electron.3066)\n\tstate = running\n\n\tprogram = /Users/user1/Applications/Visual Studio Code - Insiders.app/Contents/Frameworks/Squirrel.framework/Resources/ShipIt\n\targuments = {\n\t\t/Users/user1/Applications/Visual Studio Code - Insiders.app/Contents/Frameworks/Squirrel.framework/Resources/ShipIt\n\t\tcom.microsoft.VSCodeInsiders.ShipIt\n\t\t/Users/user1/Library/Caches/com.microsoft.VSCodeInsiders.ShipIt/ShipItState.plist\n\t}\n\n\tstdout path = /Users/user1/Library/Caches/com.microsoft.VSCodeInsiders.ShipIt/ShipIt_stdout.log\n\tstderr path = /Users/user1/Library/Caches/com.microsoft.VSCodeInsiders.ShipIt/ShipIt_stderr.log\n\tinherited environment = {\n\t\tApple_PubSub_Socket_Render =&gt; /private/tmp/com.apple.launchd.ZqVikU4Yim/Render\n\t\tSSH_AUTH_SOCK =&gt; /private/tmp/com.apple.launchd.lx5o1GBYry/Listeners\n\t}\n\n\tdefault environment = {\n\t\tPATH =&gt; /usr/bin:/bin:/usr/sbin:/sbin\n\t}\n\n\tenvironment = {\n\t\tXPC_SERVICE_NAME =&gt; com.microsoft.VSCodeInsiders.ShipIt\n\t}\n\n\tdomain = com.apple.xpc.launchd.user.domain.501.100009.Aqua\n\tasid = 100009\n\tminimum runtime = 2\n\texit timeout = 5\n\tnice = -1\n\truns = 1\n\tsuccessive crashes = 0\n\tpid = 3087\n\timmediate reason = semaphore\n\tforks = 0\n\texecs = 1\n\tinitialized = 1\n\ttrampolined = 1\n\tstarted suspended = 0\n\tproxy started suspended = 0\n\tlast exit code = (never exited)\n\n\tsemaphores = {\n\t\tsuccessful exit =&gt; 0\n\t}\n\n\tevent triggers = {\n\t}\n\n\tendpoints = {\n\t\t&quot;com.microsoft.VSCodeInsiders.ShipIt&quot; = {\n\t\t\tport = 0xb6d9f\n\t\t\tactive = 0\n\t\t\tmanaged = 1\n\t\t\treset = 0\n\t\t\thide = 0\n\t\t}\n\t}\n\n\tdynamic endpoints = {\n\t}\n\n\tpid-local endpoints = {\n\t}\n\n\tinstance-specific endpoints = {\n\t}\n\n\tevent channels = {\n\t}\n\n\tsockets = {\n\t}\n\n\tspawn type = daemon\n\tspawn role = (null)\n\tjetsam priority = 3\n\tjetsam memory limit (active) = (unlimited)\n\tjetsam memory limit (inactive) = (unlimited)\n\tjetsamproperties category = daemon\n\tsubmitted job. ignore execute allowed\n\tjetsam thread limit = 32\n\tcpumon = default\n\n\tproperties = {\n\t\tpartial import = 0\n\t\tlaunchd bundle = 0\n\t\txpc bundle = 0\n\t\tkeepalive = 0\n\t\trunatload = 0\n\t\tlow priority i/o = 0\n\t\tlow priority background i/o = 0\n\t\tlegacy timer behavior = 0\n\t\texception handler = 0\n\t\tmultiple instances = 0\n\t\tsupports transactions = 0\n\t\tsupports pressured exit = 0\n\t\tsupports idle hysteresis = 0\n\t\tenter kdp before kill = 0\n\t\twait for debugger = 0\n\t\tapp = 0\n\t\tsystem app = 0\n\t\tcreates session = 0\n\t\tinetd-compatible = 0\n\t\tinetd listener = 0\n\t\tabandon process group = 0\n\t\tone-shot = 0\n\t\tevent monitor = 0\n\t\tpenalty box = 0\n\t\tpended non-demand spawn = 0\n\t\trole account = 0\n\t\tlaunch only once = 0\n\t\tsystem support = 0\n\t\tapp-like = 0\n\t\tinferred program = 1\n\t\tjoins gui session = 0\n\t\tjoins host session = 0\n\t\tparameterized sandbox = 0\n\t\tresolve program = 0\n\t\tabandon coalition = 0\n\t\thigh bits aslr = 0\n\t\textension = 0\n\t\tnano allocator = 0\n\t\tno initgroups = 0\n\t\tstart on fs mount = 0\n\t\tendpoints initialized = 1\n\t\tdisallow all lookups = 0\n\t\tsystem service = 0\n\t}\n}</code></pre></div>\n<p>However, what about the sneaky java auto-updater?  It's not running now but surely it's scheduled to phone home at some point in the next few minutes ;).  How do I check the run frequency of it?  We can look at the property list file to find more information.  Querying launchctl seems to change between releases so what works on Mojave might not work in Catalina.</p>\n<p>Java's property list file is installed globally in /Library/LaunchAgents.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ï£¿ $ cat /Library/LaunchAgents/com.oracle.java.Java-Updater.plist \n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;\n&lt;plist version=&quot;1.0&quot;&gt;\n&lt;dict&gt;\n        &lt;key&gt;Label&lt;/key&gt;\n        &lt;string&gt;com.oracle.java.Java-Updater&lt;/string&gt;\n        &lt;key&gt;ProgramArguments&lt;/key&gt;\n        &lt;array&gt;\n        &lt;string&gt;/Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Resources/Java Updater.app/Contents/MacOS/Java Updater&lt;/string&gt;\n        &lt;string&gt;-bgcheck&lt;/string&gt;\n        &lt;/array&gt;\n        &lt;key&gt;StartCalendarInterval&lt;/key&gt;\n        &lt;dict&gt;\n                &lt;key&gt;Hour&lt;/key&gt;\n                &lt;integer&gt;01&lt;/integer&gt;\n                &lt;key&gt;Minute&lt;/key&gt;\n                &lt;integer&gt;19&lt;/integer&gt;\n                &lt;key&gt;Weekday&lt;/key&gt;\n                &lt;integer&gt;4&lt;/integer&gt;\n        &lt;/dict&gt;\n        &lt;key&gt;StandardErrorPath&lt;/key&gt;\n        &lt;string&gt;/dev/null&lt;/string&gt;\n        &lt;key&gt;StandardOutPath&lt;/key&gt;\n        &lt;string&gt;/dev/null&lt;/string&gt;\n&lt;/dict&gt;\n&lt;/plist&gt;</code></pre></div>\n<p>It's scheduled to run weekly.  We can disable the auto-updater with <code class=\"language-text\">launchctl remove &lt;LaunchDaemon&gt;</code> -- in this case <code class=\"language-text\">launchctl remove com.oracle.java.Java-Updater</code>.  Now the java auto-updater no longer appears in the list of LaunchAgents.</p>","frontmatter":{"date":"2019-11-29","updated":null,"path":"/writing/mac-specifics","title":"Understanding Mac specifics"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}