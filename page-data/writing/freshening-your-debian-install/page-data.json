{"componentChunkName":"component---src-templates-blog-template-js","path":"/writing/freshening-your-debian-install","result":{"data":{"markdownRemark":{"html":"<p>I must admit I'm quite jealous of Windows' ability to \"refresh\" meaning return it to a near vanilla state with a click of a button.  I've always had a brief moment of horror when thinking about how to refresh my Debian install and have it work the first time, especially with the various configurations you can have with LUKS on LVM and a separate /boot partition.</p>\n<p>That being said, I have too much cruft on my home server's install with old docker binaries laying around, various extra bridges brought in by libvirt and even minikube and k3s managing to become deeply intertwined with systemd somehow.</p>\n<p>So I wanted to start with a fresh Debian 10.2 install that would replace my existing install and work the first time upon rebooting (a large ask!).</p>\n<h1>Background</h1>\n<p>My setup on the home server is pretty simple.  A 60GB root drive that runs ext4 on LVM.  No LUKS here because it's a headless server that doesn't have a keyboard attached.  /home partition could be encrypted but that's an exercise for another day?  Asking me why I don't encrypt this drive is like saying why don't you encrypt your Raspberry Pi's SD card?  It just seems like something that's going to cause pain for little reason.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Disk /dev/sda: 55.9 GiB, 60022480896 bytes, 117231408 sectors\n\nDevice       Start       End   Sectors  Size Type\n/dev/sda1     2048   1050623   1048576  512M EFI System\n/dev/sda2  1050624   1550335    499712  244M Linux filesystem\n/dev/sda3  1550336 117229567 115679232 55.2G Linux LVM</code></pre></div>\n<p>The plan is to create a new Debian partition with LVM, run debootstrap into it, chroot, set up SSH remote access by copying the config over from the old install.</p>\n<h1>Preparing LVM</h1>\n<p>As with any major operation, we should snapshot our current state so we can restore if things don't go well.  However, because the change is taking place in a new logical volume we can simply leave the old LV untouched.</p>\n<p>First we'll backup the LVM headers for physical volumes, volume groups, and logical volumes.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">tar cf /somewhere/away/from/lvm/lvm.tar /etc/lvm</code></pre></div>\n<p>Next we'll backup the boot partition</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">umount /boot\nmount -o ro /boot\ntar cf /somewhere/away/from/lvm/boot.tar /boot</code></pre></div>\n<p>Finally, we create the new logical volume to house the new installation.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">lvcreate -L 4G -n newroot volumegroup</code></pre></div>\n<h1>Creating the new Debian partition</h1>\n<p>This part was made easy thanks to Debian's really useful tools.  More information available in their [Developer Documentation][https://www.debian.org/releases/stretch/amd64/apds03.html.en].  Install debootstrap if you don't already have it and walk through the following commands on the target machine.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mkfs.ext4 /dev/mapper/volumegroup-newroot \nmkdir /mnt/debian\nmount /dev/mapper/volumegroup-newroot /mnt/debian\n/usr/sbin/debootstrap --arch amd64 buster /mnt/debian http://ftp.us.debian.org/debian\nmount --rbind /dev /mnt/debian/dev\nmount --make-rslave /mnt/debian/dev\nmount -t proc /proc /mnt/debian/proc\nmount --rbind /sys /mnt/debian/sys\nmount --make-rslave /mnt/debian/sys\nmount --rbind /tmp /mnt/debian/tmp \ncp /etc/fstab /mnt/debian/etc/fstab\nvim /mnt/debian/etc/fstab # change root to point to newroot\ncp /etc/adjtime /mnt/debian/etc/adjtime\ncp /etc/hosts /mnt/debian/etc/hosts\ncp /etc/hostname /mnt/debian/etc/hostname\ncp /etc/network/interfaces /mnt/debian/etc/network/\ncp /etc/resolv.conf /mnt/debian/etc/resolv.conf\ncat /etc/apt/sources.list &gt;&gt; /mnt/debian/etc/apt/sources.list\nvim /mnt/debian/etc/apt/sources.list # fix any errors\nLANG=C.UTF-8 chroot /mnt/debian /bin/bash\n(inside chroot) apt update\n(inside chroot) dpkg-reconfigure tzdata\n(inside chroot) mount /boot\n(inside chroot) apt install linux-image-4.19.0-6-amd64\n(inside chroot) apt install grub2 # don&#39;t select to install to any partition\n(inside chroot) apt install lvm2\n(inside chroot) apt install ssh\n(inside chroot) systemctl enable ssh\n(inside chroot) editor /etc/ssh/sshd_config # set PermitRootLogin yes\n(inside chroot) adduser local\n(inside chroot) passwd local\n(inside chroot) passwd # set root passwd</code></pre></div>\n<p>Now the system is completely configured for booting.  You'll need to check /boot/grub/grub.cfg and make sure that the newroot LVM ID is referenced (use lvdisplay).</p>\n<p>Reboot the system.  If it doesn't work, you'll likely need to get out your external monitor and external keyboard.  Luckily, I survived unharmed :).</p>\n<h1>Finishing touches</h1>\n<p>SSH into the new system as root and finish installing the standard system files.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">tasksel install standard</code></pre></div>\n<p>Don't forget to delete the old entry in your local machine's sshd config as new keys were generated for the new install.</p>\n<p>You can remove the old LVM logical volume or use it to bring over any missing configuration from the new install.</p>\n<p>And with that, consider your Debian install refreshed!</p>","frontmatter":{"date":"2019-11-17","updated":null,"path":"/writing/freshening-your-debian-install","title":"Refreshing your Debian install with debootstrap and LVM"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}