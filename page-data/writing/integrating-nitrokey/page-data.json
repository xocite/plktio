{"componentChunkName":"component---src-templates-blog-template-js","path":"/writing/integrating-nitrokey","webpackCompilationHash":"6fbff2a2f8190da28722","result":{"data":{"markdownRemark":{"html":"<p><em>Keywords: ssh-agent, gpg-agent, pcsc, nitrokey</em></p>\n<p>I recently collected a new <a href=\"https://www.nitrokey.com/\">Nitrokey Pro</a>.  This post\nexplains how I configured it and integrated it into my authentication flow.</p>\n<h1>Before connecting the Nitrokey</h1>\n<p>The Nitrokey supports the OpenPGP standard so you'll be mainly interacting with\nit using GPG. On Gentoo Linux, you'll need gnupg with the +smartcard and +usb USE flags\nenabled.</p>\n<p><code class=\"language-text\"># echo &quot;app-crypt/gnupg smartcard usb&quot; &gt;&gt; /etc/portage/package.use/gnupg</code></p>\n<p>Next, we'll install the required packages.</p>\n<p><code class=\"language-text\">$ sudo emerge -av sys-apps/pcsc-tools sys-apps/pcsc-lite dev-libs/opensc \\\napp-crypt/ccid app-crypt/gnupg</code></p>\n<p>The abstractions work like the following: gnupg -> pcsc-lite -> opensc -> ccid\n-> nitrokey.</p>\n<h1>Connecting the Nitrokey</h1>\n<p>Here's the immediate output from <code class=\"language-text\">dmesg</code> after connecting the Nitrokey.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[24798.012187] usb 2-2.2: new full-speed USB device number 5 using uhci_hcd\n[24798.450042] usb 2-2.2: New USB device found, idVendor=20a0, idProduct=4108,\nbcdDevice= 1.01\n[24798.450044] usb 2-2.2: New USB device strings: Mfr=1, Product=2,\nSerialNumber=3\n[24798.450046] usb 2-2.2: Product: Nitrokey Pro\n[24798.450047] usb 2-2.2: Manufacturer: Nitrokey\n[24798.450048] usb 2-2.2: SerialNumber: 0000000000000000000086BE\n[24798.467777] hid-generic 0003:20A0:4108.0002: hiddev96,hidraw1: USB HID v1.10\nDevice [Nitrokey Nitrokey Pro] on usb-0000:02:00.0-2.2/input0</code></pre></div>\n<p>Let's see if pcsc supports the smart card.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ sudo pcscd -a -d -f\n[..snip..]\n00005549 /var/tmp/portage/sys-apps/pcsc-lite-1.8.24/work/pcsc-lite-1.8.24/src/eventhandler.c:289:EHStatusHandlerThread()\npowerState: POWER_STATE_POWERED\n[..snip..]</code></pre></div>\n<p>This looks good; the card was recognised.  Next, we'll start the service and let it run on boot.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ sudo systemctl start pcscd.service pcscd.socket\n$ sudo systemctl enable pcscd.service pcscd.socket</code></pre></div>\n<p>The services should now be loaded in systemctl memory and running.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ systemctl list-units --type=service,socket --state=running pcsc*\nUNIT          LOAD   ACTIVE SUB     DESCRIPTION\npcscd.service loaded active running PC/SC Smart Card Daemon\npcscd.socket  loaded active running PC/SC Smart Card Daemon Activation Socket</code></pre></div>\n<p>Finally, we'll confirm that gpg can see the card as well.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ gpg --card-status\nReader ...........: Nitrokey Nitrokey Pro (0000000000000000000086BE) 00 00\nApplication ID ...: D2760001240103030005000086BE0000\nVersion ..........: 3.3\nManufacturer .....: ZeitControl\nSerial number ....: 000086BE\nName of cardholder: [not set]\nLanguage prefs ...: de\nSex ..............: unspecified\nURL of public key : [not set]\nLogin data .......: [not set]\nSignature PIN ....: forced\nKey attributes ...: rsa2048 rsa2048 rsa2048\nMax. PIN lengths .: 64 64 64\nPIN retry counter : 3 0 3\nSignature counter : 0\nKDF setting ......: on\nSignature key ....: [none]\nEncryption key....: [none]\nAuthentication key: [none]\nGeneral key info..: [none]</code></pre></div>\n<p>And gpg looks good too.</p>\n<h1>Keypair configuration</h1>\n<p>According to the Nitrokey\n<a href=\"https://www.nitrokey.com/files/doc/Nitrokey_Pro_factsheet.pdf\">datasheet</a> it\nsupports RSA-2048 up to RSA-4096 and ECC-256 up to ECC-512 (Brainpool and NIST\nalgorithms).  For compatibility reasons, it's probably best to use RSA-2048\nkeypairs despite them being slower and larger than equivalent ECC keypairs.\nIn this tutorial I show RSA-2048.  For my personal key, I'll use ECC which is\nnot shown in this tutorial.</p>\n<ul>\n<li>According to Microsoft Research, ECC (elliptical curve\ncryptography) keypairs are <a href=\"https://eprint.iacr.org/2017/598.pdf\">easier to\ncrack</a> than RSA keypairs with a\nsufficiently powerful quantum computer.  </li>\n<li>The algorithms supported by the Nitrokey are supposedly vunerable to\nside-channel attacks due to not implementing a Montogomery power ladder.</li>\n<li>ECC is used for Bitcoin, just secp256k1 which is not supported\nby the Nitrokey.</li>\n<li>The kernel.org\n<a href=\"https://www.kernel.org/doc/html/latest/process/maintainer-pgp-guide.html\">guidelines</a>\nsay nistp256 is suitable.</li>\n</ul>\n<p>We'll be creating:</p>\n<ul>\n<li>All keys: RSA-2048, expiring yearly on 1 August, SHA-2 series output digest</li>\n<li>Primary key: certify and signing\n** Subkey 1: (encryption)\n** Subkey (authentication)</li>\n<li>Revocation certificate stored offsite</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ gpg --full-generate-key --expert\ngpg (GnuPG) 2.2.15; Copyright (C) 2019 Free Software Foundation, Inc.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nPlease select what kind of key you want:\n   (1) RSA and RSA (default)\n   (2) DSA and Elgamal\n   (3) DSA (sign only)\n   (4) RSA (sign only)\n   (7) DSA (set your own capabilities)\n   (8) RSA (set your own capabilities)\n   (9) ECC and ECC\n  (10) ECC (sign only)\n  (11) ECC (set your own capabilities)\n  (13) Existing key\nYour selection? 1\nRSA keys may be between 1024 and 4096 bits long.\nWhat keysize do you want? (2048)\nRequested keysize is 2048 bits\nRSA keys may be between 1024 and 4096 bits long.\nWhat keysize do you want for the subkey? (2048)\nRequested keysize is 2048 bits\nPlease specify how long the key should be valid.\n         0 = key does not expire\n      &lt;n&gt;  = key expires in n days\n      &lt;n&gt;w = key expires in n weeks\n      &lt;n&gt;m = key expires in n months\n      &lt;n&gt;y = key expires in n years\nKey is valid for? (0) 358\nKey expires at Sat 01 Aug 2020 20:33:09 BST\nIs this correct? (y/N) y\n\nGnuPG needs to construct a user ID to identify your key.\n\nReal name: Antony Jepson\nEmail address: a@plkt.io\nComment: RSA key for Antony Jepson.  Renewed every 1 August.\nYou selected this USER-ID:\n    &quot;Antony Jepson (RSA key for Antony Jepson.  Renewed every 1 August.) &lt;a@plkt.io&gt;&quot;\n\nChange (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? o\nWe need to generate a lot of random bytes. It is a good idea to perform\nsome other action (type on the keyboard, move the mouse, utilize the\ndisks) during the prime generation; this gives the random number\ngenerator a better chance to gain enough entropy.\nWe need to generate a lot of random bytes. It is a good idea to perform\nsome other action (type on the keyboard, move the mouse, utilize the\ndisks) during the prime generation; this gives the random number\ngenerator a better chance to gain enough entropy.\ngpg: /home/bnt/.gnupg/trustdb.gpg: trustdb created\ngpg: key 718044D8003D317A marked as ultimately trusted\ngpg: directory &#39;/home/bnt/.gnupg/openpgp-revocs.d&#39; created\ngpg: revocation certificate stored as &#39;/home/bnt/.gnupg/openpgp-revocs.d/0F8D4AD674DB570DB095CB3F718044D8003D317A.rev&#39;\npublic and secret key created and signed.\n\npub   rsa2048 2019-08-09 [SC] [expires: 2020-08-01]\n      0F8D4AD674DB570DB095CB3F718044D8003D317A\nuid                      Antony Jepson (RSA key for Antony Jepson.  Renewed every 1 August.) &lt;a@plkt.io&gt;\nsub   rsa2048 2019-08-09 [E] [expires: 2020-08-01]\n\n$ gpg --edit-key --expert a@plkt.io\ngpg (GnuPG) 2.2.15; Copyright (C) 2019 Free Software Foundation, Inc.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nSecret key is available.\n\ngpg: checking the trustdb\ngpg: marginals needed: 3  completes needed: 1  trust model: pgp\ngpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1u\ngpg: next trustdb check due at 2020-08-01\nsec  rsa2048/718044D8003D317A\n     created: 2019-08-09  expires: 2020-08-01  usage: SC\n     trust: ultimate      validity: ultimate\nssb  rsa2048/692971AD1D29742D\n     created: 2019-08-09  expires: 2020-08-01  usage: E\n[ultimate] (1). Antony Jepson (RSA key for Antony Jepson.  Renewed every 1 August.) &lt;a@plkt.io&gt;\n\ngpg&gt; addkey\nPlease select what kind of key you want:\n   (3) DSA (sign only)\n   (4) RSA (sign only)\n   (5) Elgamal (encrypt only)\n   (6) RSA (encrypt only)\n   (7) DSA (set your own capabilities)\n   (8) RSA (set your own capabilities)\n  (10) ECC (sign only)\n  (11) ECC (set your own capabilities)\n  (12) ECC (encrypt only)\n  (13) Existing key\nYour selection? 8\n\nPossible actions for a RSA key: Sign Encrypt Authenticate\nCurrent allowed actions: Sign Encrypt\n\n   (S) Toggle the sign capability\n   (E) Toggle the encrypt capability\n   (A) Toggle the authenticate capability\n   (Q) Finished\n\nYour selection? A\n\nPossible actions for a RSA key: Sign Encrypt Authenticate\nCurrent allowed actions: Sign Encrypt Authenticate\n\n   (S) Toggle the sign capability\n   (E) Toggle the encrypt capability\n   (A) Toggle the authenticate capability\n   (Q) Finished\n\nYour selection? S\n\nPossible actions for a RSA key: Sign Encrypt Authenticate\nCurrent allowed actions: Encrypt Authenticate\n\n   (S) Toggle the sign capability\n   (E) Toggle the encrypt capability\n   (A) Toggle the authenticate capability\n   (Q) Finished\n\nYour selection? E\n\nPossible actions for a RSA key: Sign Encrypt Authenticate\nCurrent allowed actions: Authenticate\n\n   (S) Toggle the sign capability\n   (E) Toggle the encrypt capability\n   (A) Toggle the authenticate capability\n   (Q) Finished\n\nYour selection? q\nRSA keys may be between 1024 and 4096 bits long.\nWhat keysize do you want? (2048)\nRequested keysize is 2048 bits\nPlease specify how long the key should be valid.\n         0 = key does not expire\n      &lt;n&gt;  = key expires in n days\n      &lt;n&gt;w = key expires in n weeks\n      &lt;n&gt;m = key expires in n months\n      &lt;n&gt;y = key expires in n years\nKey is valid for? (0) 358\nKey expires at Sat 01 Aug 2020 20:37:48 BST\nIs this correct? (y/N) y\nReally create? (y/N) y\nWe need to generate a lot of random bytes. It is a good idea to perform\nsome other action (type on the keyboard, move the mouse, utilize the\ndisks) during the prime generation; this gives the random number\ngenerator a better chance to gain enough entropy.\n\nsec  rsa2048/718044D8003D317A\n     created: 2019-08-09  expires: 2020-08-01  usage: SC\n     trust: ultimate      validity: ultimate\nssb  rsa2048/692971AD1D29742D\n     created: 2019-08-09  expires: 2020-08-01  usage: E\nssb  rsa2048/73CCBEF81E3522EB\n     created: 2019-08-09  expires: 2020-08-01  usage: A\n[ultimate] (1). Antony Jepson (RSA key for Antony Jepson.  Renewed every 1 August.) &lt;a@plkt.io&gt;\n\ngpg&gt; quit\nSave changes? (y/N) y</code></pre></div>\n<p>Now, back up your key and save it somewhere safe.  We do this now because once\nthey keys are copied to your Nitrokey they are deleted.</p>\n<p><code class=\"language-text\">$ gpg --export-secret-keys a@plkt.io &gt; sec-key.asc</code></p>\n<p>Next, we'll copy the keys to the Nitrokey.  First the signature key, then the\nencryption key, then the authentication key (for SSH).</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ gpg --edit-key --expert a@plkt.io\ngpg (GnuPG) 2.2.15; Copyright (C) 2019 Free Software Foundation, Inc.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nSecret key is available.\n\nsec  rsa2048/718044D8003D317A\n     created: 2019-08-09  expires: 2020-08-01  usage: SC\n     trust: ultimate      validity: ultimate\nssb  rsa2048/692971AD1D29742D\n     created: 2019-08-09  expires: 2020-08-01  usage: E\nssb  rsa2048/73CCBEF81E3522EB\n     created: 2019-08-09  expires: 2020-08-01  usage: A\n[ultimate] (1). Antony Jepson (RSA key for Antony Jepson.  Renewed every 1 August.) &lt;a@plkt.io&gt;\n\ngpg&gt; keytocard\nReally move the primary key? (y/N) y\nPlease select where to store the key:\n   (1) Signature key\n   (3) Authentication key\nYour selection? 1\n\nsec  rsa2048/718044D8003D317A\n     created: 2019-08-09  expires: 2020-08-01  usage: SC\n     trust: ultimate      validity: ultimate\nssb  rsa2048/692971AD1D29742D\n     created: 2019-08-09  expires: 2020-08-01  usage: E\nssb  rsa2048/73CCBEF81E3522EB\n     created: 2019-08-09  expires: 2020-08-01  usage: A\n[ultimate] (1). Antony Jepson (RSA key for Antony Jepson.  Renewed every 1 August.) &lt;a@plkt.io&gt;\n\ngpg&gt; key 1\n\nsec  rsa2048/718044D8003D317A\n     created: 2019-08-09  expires: 2020-08-01  usage: SC\n     trust: ultimate      validity: ultimate\nssb* rsa2048/692971AD1D29742D\n     created: 2019-08-09  expires: 2020-08-01  usage: E\nssb  rsa2048/73CCBEF81E3522EB\n     created: 2019-08-09  expires: 2020-08-01  usage: A\n[ultimate] (1). Antony Jepson (RSA key for Antony Jepson.  Renewed every 1 August.) &lt;a@plkt.io&gt;\n\ngpg&gt; keytocard\nPlease select where to store the key:\n   (2) Encryption key\nYour selection? 2\n\nsec  rsa2048/718044D8003D317A\n     created: 2019-08-09  expires: 2020-08-01  usage: SC\n     trust: ultimate      validity: ultimate\nssb* rsa2048/692971AD1D29742D\n     created: 2019-08-09  expires: 2020-08-01  usage: E\nssb  rsa2048/73CCBEF81E3522EB\n     created: 2019-08-09  expires: 2020-08-01  usage: A\n[ultimate] (1). Antony Jepson (RSA key for Antony Jepson.  Renewed every 1 August.) &lt;a@plkt.io&gt;\n\ngpg&gt; key 2\n\nsec  rsa2048/718044D8003D317A\n     created: 2019-08-09  expires: 2020-08-01  usage: SC\n     trust: ultimate      validity: ultimate\nssb* rsa2048/692971AD1D29742D\n     created: 2019-08-09  expires: 2020-08-01  usage: E\nssb* rsa2048/73CCBEF81E3522EB\n     created: 2019-08-09  expires: 2020-08-01  usage: A\n[ultimate] (1). Antony Jepson (RSA key for Antony Jepson.  Renewed every 1 August.) &lt;a@plkt.io&gt;\n\ngpg&gt; key 1\n\nsec  rsa2048/718044D8003D317A\n     created: 2019-08-09  expires: 2020-08-01  usage: SC\n     trust: ultimate      validity: ultimate\nssb  rsa2048/692971AD1D29742D\n     created: 2019-08-09  expires: 2020-08-01  usage: E\nssb* rsa2048/73CCBEF81E3522EB\n     created: 2019-08-09  expires: 2020-08-01  usage: A\n[ultimate] (1). Antony Jepson (RSA key for Antony Jepson.  Renewed every 1 August.) &lt;a@plkt.io&gt;\n\ngpg&gt; keytocard\nPlease select where to store the key:\n   (3) Authentication key\nYour selection? 3\n\nsec  rsa2048/718044D8003D317A\n     created: 2019-08-09  expires: 2020-08-01  usage: SC\n     trust: ultimate      validity: ultimate\nssb  rsa2048/692971AD1D29742D\n     created: 2019-08-09  expires: 2020-08-01  usage: E\nssb* rsa2048/73CCBEF81E3522EB\n     created: 2019-08-09  expires: 2020-08-01  usage: A\n[ultimate] (1). Antony Jepson (RSA key for Antony Jepson.  Renewed every 1 August.) &lt;a@plkt.io&gt;\n\ngpg&gt; quit\nSave changes? (y/N) y</code></pre></div>\n<p>The public key can be exported and stored in any easily retrievable place.</p>\n<p><code class=\"language-text\">$ gpg --armor --export a@plkt.io &gt; pubkey.asc</code></p>\n<p>Here's the final state of the Nitrokey.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ gpg --card-edit\n\nReader ...........: Nitrokey Nitrokey Pro (0000000000000000000086BE) 00 00\nApplication ID ...: D2760001240103030005000086BE0000\nVersion ..........: 3.3\nManufacturer .....: ZeitControl\nSerial number ....: 000086BE\nName of cardholder: [not set]\nLanguage prefs ...: de\nSex ..............: unspecified\nURL of public key : [not set]\nLogin data .......: [not set]\nSignature PIN ....: forced\nKey attributes ...: rsa2048 rsa2048 rsa2048\nMax. PIN lengths .: 64 64 64\nPIN retry counter : 3 0 3\nSignature counter : 0\nKDF setting ......: on\nSignature key ....: 0F8D 4AD6 74DB 570D B095  CB3F 7180 44D8 003D 317A\n      created ....: 2019-08-09 19:34:03\nEncryption key....: FECA 217D E1E5 96AA A7F5  86F1 6929 71AD 1D29 742D\n      created ....: 2019-08-09 19:34:03\nAuthentication key: D6CF ED7E FA74 999D 2E99  AEE4 73CC BEF8 1E35 22EB\n      created ....: 2019-08-09 19:36:50\nGeneral key info..:\npub  rsa2048/718044D8003D317A 2019-08-09 Antony Jepson (RSA key for Antony Jepson.  Renewed every 1 August.) &lt;a@plkt.io&gt;\nsec&gt;  rsa2048/718044D8003D317A  created: 2019-08-09  expires: 2020-08-01\n                                card-no: 0005 000086BE\nssb&gt;  rsa2048/692971AD1D29742D  created: 2019-08-09  expires: 2020-08-01\n                                card-no: 0005 000086BE\nssb&gt;  rsa2048/73CCBEF81E3522EB  created: 2019-08-09  expires: 2020-08-01\n                                card-no: 0005 000086BE\n\ngpg/card&gt; quit</code></pre></div>\n<p>More information available on Nitrokey's website (guide)[https://www.nitrokey.com/documentation/openpgp-create-backup].</p>\n<p>The keys shown in this example are just for reference.  My actual public key is stored at <strong><a href=\"https://plkt.io/key\">https://plkt.io/key</a></strong>.</p>\n<h1>Using the keypair</h1>\n<p>So I think for most people this is the stopping point -- people don't actually\nintegrate it into their flow.  Here's the references I used for integrating it\ninto my daily flow. </p>\n<h2>Signing code commits</h2>\n<p>GitHub has a <a href=\"https://help.github.com/en/articles/signing-commits\">great guide</a>.</p>\n<p>In the local repository, issue <code class=\"language-text\">git config commit.gpgsign true</code>.  Then when you\ncommit, add the S flag: <code class=\"language-text\">git commit -S -m commit message</code>.</p>\n<h2>Encrypting and signing email</h2>\n<p>I use a mixture of Outlook and Mutt for email.  I use Outlook for day-to-day\nemail and Mutt for mailing lists and important emails.  See the Mutt\n<a href=\"https://gitlab.com/muttmua/mutt/wikis/MuttGuide/UseGPG\">documentation</a> for\nhelp.</p>\n<h2>Logging into remote systems</h2>\n<p>Two helpful guides: <a href=\"https://wiki.archlinux.org/index.php/GnuPG#SSH_agent\">Arch\nWiki</a> and the top Google\nresult <a href=\"https://eklitzke.org/using-gpg-agent-effectively\">Using gpg-agent\neffectively</a>.</p>\n<h2>Encrypting files</h2>\n<p>Use the official <a href=\"https://www.gnupg.org/gph/en/manual/x110.html\">GPG\ndocumentation</a>.</p>\n<h1>Summary</h1>\n<p>Using public keys with a smart card wasn't as difficult as expected.  I think\nyou need to incrementally introduce it into your habits over time.  Start by\noccasionally sending encrypted email -- see how people respond.  Attach the\ndigest to the email instead of including it inline.</p>\n<p>Let me know if you found any issues with the instructions above.</p>","frontmatter":{"date":"2019-07-30","updated":"2019-08-09","path":"/writing/integrating-nitrokey","title":"Configuring and integrating Nitrokey into your workflow"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}