<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1" />
<link href="themes/test/style.css" rel="stylesheet">
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-144235537-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-144235537-2');
</script>
<title>Understanding SHA256 Part 3 &#8211; AJONLINE</title>
<link rel='dns-prefetch' href='https://s.w.org/' />
<link rel="alternate" type="application/rss+xml" title="AJONLINE &raquo; Understanding SHA256 Part 3 Comments Feed" href="https://antonyjepson.co.uk/understanding-sha256-p3/feed/" />
<link rel='stylesheet' id='wp-block-library-css'  href='css/dist/block-library/style.min.css?ver=5.2.2' type='text/css' media='all' />
<link rel='https://api.w.org/' href='https://antonyjepson.co.uk/wp-json/' />
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="xmlrpc.php?rsd" />
<link rel='prev' title='Understanding SHA256 Part 2' href='index.html?p=662' />
<link rel='next' title='Setting up a Docker Pi-hole DNS server for wired and wireless clients' href='index.html?p=582' />
<meta name="generator" content="WordPress 5.2.2" />
<link rel="canonical" href="index.html?p=663" />
<link rel='shortlink' href='index.html?p=663' />
<link rel="icon" href="uploads/2018/11/favicon.ico" sizes="32x32" />
<link rel="icon" href="uploads/2018/11/favicon.ico" sizes="192x192" />
<link rel="apple-touch-icon-precomposed" href="uploads/2018/11/favicon.ico" />
<meta name="msapplication-TileImage" content="https://antonyjepson.co.uk/wp-content/uploads/2018/11/favicon.ico" />
</head>
<body>
<div class="gc">
<div class="gi0">
<nav>
<img class="logo" src="uploads/2018/11/favicon.ico" />
<header class="nav">
<a href="https://antonyjepson.co.uk">AJONLINE</a>
</header>
<br /><br /><br />
<li class="page_item page-item-80"><a href="index.html?p=80">About</a></li>
<li class="page_item page-item-596"><a href="index.html?p=596">Contact and Consulting</a></li>
<li class="page_item page-item-668"><a href="index.html?p=668">License</a></li>
<li class="page_item page-item-613"><a href="index.html?p=613">Resume</a></li>
<br />
</nav>
</div> <!-- end gi0 -->
<div class="gi1">

<article>
<header>Understanding SHA256 Part 3</header>
<em>This is the last in the three part series where we break down the SHA-2 algorithm. In this part, we&#8217;ll improve the implementation shown in part 2 and compare it to some existing implementations. Comparison The main implementation I&#8217;d like to compare the C version I wrote is the sha256.c present in OpenSSL. Some of [&hellip;]</em><br /><em>13 May 2018</em>
<p><em>This is the last in the three part series where we break down the SHA-2 algorithm. In this part, we&#8217;ll improve the implementation shown in part 2 and compare it to some existing implementations.</em></p>
<h3 id="comparison">Comparison</h3>
<p>The main implementation I&#8217;d like to compare the C version I wrote is the <a href="https://github.com/openssl/openssl/blob/master/crypto/sha/sha256.c">sha256.c</a> present in OpenSSL. Some of the main differences are highlighted below:</p>
<ul>
<li>The square and cube fractional roots of the primes are pre-generated instead of being generated during runtime.</li>
<li>The [S|s]igma functions are defined instead of functions.</li>
<li>Typedef struct is used instead of referencing all structs by their long name.</li>
<li>They specify the rotate function in assembly instead of writing a C function.</li>
<li>They have a x86 assembly function that fetches the next block of bits.</li>
<li>They unroll the loop that fills the first 16 integers of the message schedule.</li>
</ul>
<p>Most of the comments by these changes indicated they were for performance reasons.</p>
<h3 id="improvements-to-program">Improvements to program</h3>
<p>Based on the above I made the following changes to my program. This shaved off about a kilobyte from my program (before: 18656 bytes; now: 16840 bytes).</p>
<ul>
<li>Removed all internal generation of prime fractional roots with constants.</li>
<li>Removed all internal debug printing messages.</li>
<li>Used defines instead of functions for the hash functions.</li>
<li>Moved all the overall SHA flow into its own function.</li>
<li>Made all references to the input string const.</li>
</ul>
<p>The final program is below.</p>
<div id="mycode" class="sourceCode">
<pre class="sourceCode c"><code class="sourceCode c"><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span>
<span class="pp">#include </span><span class="im">&lt;stdlib.h&gt;</span>
<span class="pp">#include </span><span class="im">&lt;math.h&gt;</span>
<span class="pp">#include </span><span class="im">&lt;inttypes.h&gt;</span>


<span class="dt">static</span> <span class="dt">const</span> <span class="dt">unsigned</span> <span class="dt">long</span> SQUARE_ROOT_256[<span class="dv">8</span>] = {
  0x6a09e667UL, 0xbb67ae85UL, 0x3c6ef372UL, 0xa54ff53aUL, 
  0x510e527fUL, 0x9b05688cUL, 0x1f83d9abUL, 0x5be0cd19UL
};

<span class="dt">static</span> <span class="dt">const</span> <span class="dt">unsigned</span> <span class="dt">long</span> CUBE_ROOT_256[<span class="dv">64</span>] = {
  0x428a2f98UL, 0x71374491UL, 0xb5c0fbcfUL, 0xe9b5dba5UL,
  0x3956c25bUL, 0x59f111f1UL, 0x923f82a4UL, 0xab1c5ed5UL,
  0xd807aa98UL, 0x12835b01UL, 0x243185beUL, 0x550c7dc3UL,
  0x72be5d74UL, 0x80deb1feUL, 0x9bdc06a7UL, 0xc19bf174UL,
  0xe49b69c1UL, 0xefbe4786UL, 0x0fc19dc6UL, 0x240ca1ccUL,
  0x2de92c6fUL, 0x4a7484aaUL, 0x5cb0a9dcUL, 0x76f988daUL,
  0x983e5152UL, 0xa831c66dUL, 0xb00327c8UL, 0xbf597fc7UL,
  0xc6e00bf3UL, 0xd5a79147UL, 0x06ca6351UL, 0x14292967UL,
  0x27b70a85UL, 0x2e1b2138UL, 0x4d2c6dfcUL, 0x53380d13UL,
  0x650a7354UL, 0x766a0abbUL, 0x81c2c92eUL, 0x92722c85UL,
  0xa2bfe8a1UL, 0xa81a664bUL, 0xc24b8b70UL, 0xc76c51a3UL,
  0xd192e819UL, 0xd6990624UL, 0xf40e3585UL, 0x106aa070UL,
  0x19a4c116UL, 0x1e376c08UL, 0x2748774cUL, 0x34b0bcb5UL,
  0x391c0cb3UL, 0x4ed8aa4aUL, 0x5b9cca4fUL, 0x682e6ff3UL,
  0x748f82eeUL, 0x78a5636fUL, 0x84c87814UL, 0x8cc70208UL,
  0x90befffaUL, 0xa4506cebUL, 0xbef9a3f7UL, 0xc67178f2UL
};

<span class="pp">#define rotate_right(x, n)    (((x) &gt;&gt; (n)) | ((x) &lt;&lt; (32 - (n))))</span>
<span class="pp">#define hash_sigma_0(x)       (rotate_right((x), 7) ^ rotate_right((x), 18) ^ ((x) &gt;&gt; 3))</span>
<span class="pp">#define hash_sigma_1(x)       (rotate_right((x), 17) ^ rotate_right((x), 19) ^ ((x) &gt;&gt; 10))</span>
<span class="pp">#define hash_sum_0(x)         (rotate_right((x), 2) ^ rotate_right((x), 13) ^ rotate_right((x), 22))</span>
<span class="pp">#define hash_sum_1(x)         (rotate_right((x), 6) ^ rotate_right((x), 11) ^ (rotate_right((x), 25)))</span>
<span class="pp">#define hash_maj(x, y, z)     (((x) &amp; (y)) ^ ((x) &amp; (z)) ^ ((y) &amp; (z)))</span>
<span class="pp">#define hash_ch(x, y, z)      (((x) &amp; (y)) ^ ((~x) &amp; (z)))</span>

<span class="kw">struct</span> message_block {
  <span class="dt">uint32_t</span> block[<span class="dv">16</span>];
  <span class="kw">struct</span> message_block * next;
  <span class="dt">uint8_t</span> position;
};

<span class="kw">struct</span> message_schedule {
  <span class="dt">uint32_t</span> block[<span class="dv">64</span>];
  <span class="kw">struct</span> message_schedule * next;
};

<span class="kw">struct</span> message_block * new_message_block(<span class="dt">void</span>) {
  <span class="kw">struct</span> message_block * m = calloc(<span class="dv">1</span>, <span class="kw">sizeof</span> *m);
  m-&gt;next = NULL;
  <span class="cf">return</span> m;
}

<span class="dt">void</span> free_message_block(<span class="kw">struct</span> message_block *m) {
  <span class="cf">if</span> (m == NULL) <span class="cf">return</span>;
  free_message_block(m-&gt;next);
  free(m);
}

<span class="kw">struct</span> message_schedule * new_message_schedule(<span class="dt">void</span>) {
  <span class="kw">struct</span> message_schedule * m = calloc(<span class="dv">1</span>, <span class="kw">sizeof</span> *m);
  m-&gt;next = NULL;
  <span class="cf">return</span> m;
}

<span class="dt">void</span> free_message_schedule(<span class="kw">struct</span> message_schedule *m) {
  <span class="cf">if</span> (m == NULL) <span class="cf">return</span>;
  free_message_schedule(m-&gt;next);
  free(m);
}

<span class="kw">struct</span> hash {
  <span class="dt">uint32_t</span> value[<span class="dv">8</span>];
};

<span class="kw">struct</span> message_block * pad_message(<span class="dt">const</span> <span class="dt">char</span> *input) {
  <span class="dt">size_t</span> len = <span class="dv">0</span>;
  <span class="dt">uint32_t</span> * blk;
  <span class="dt">uint16_t</span> remainder;
  <span class="dt">char</span> ch;
  <span class="kw">struct</span> message_block *head, *p;
  head = new_message_block();

  p = head;

  <span class="co">// Determine how many message blocks we need.</span>
  <span class="co">// We need [data][1 bit][zero padding][length]</span>
  <span class="co">// [data] maximum length 447 bits</span>
  <span class="co">// [1 bit] length = 1 bit</span>
  <span class="co">// [zero padding] maximum length 447 bits</span>
  <span class="co">// [length] 64 bits</span>

  <span class="cf">if</span> (input == NULL) {
    head-&gt;block[<span class="dv">0</span>] = 1u &lt;&lt; <span class="dv">31</span>;
    <span class="cf">return</span> head;
  }
  
  <span class="cf">while</span> (*(input + len) != '\<span class="dv">0</span>') {
    len++; <span class="co">// we have one character</span>
    blk = &amp;p-&gt;block[p-&gt;position];
    ch = *(input + len - <span class="dv">1</span>);

    <span class="cf">switch</span> (len % <span class="dv">4</span>) {
      <span class="cf">case</span> <span class="dv">1</span>:  *blk |= ch &lt;&lt; <span class="dv">24</span>;
              <span class="cf">break</span>;
      <span class="cf">case</span> <span class="dv">2</span>:  *blk |= ch &lt;&lt; <span class="dv">16</span>;
              <span class="cf">break</span>;
      <span class="cf">case</span> <span class="dv">3</span>:  *blk |= ch &lt;&lt; <span class="dv">8</span>;
              <span class="cf">break</span>;
      <span class="cf">default</span>: *blk |= ch;
              <span class="cf">break</span>;
    }

    <span class="cf">if</span> (p-&gt;position == <span class="dv">15</span> &amp;&amp; (len % <span class="dv">4</span>) == <span class="dv">0</span>) { <span class="co">// At the end of the block</span>
      p-&gt;next = new_message_block();
      p = p-&gt;next;
    } <span class="cf">else</span> { 
      <span class="cf">if</span> (len % <span class="dv">4</span> == <span class="dv">0</span>) p-&gt;position++;
    }
  }

  <span class="co">// Append the one after this block.</span>
  p-&gt;block[p-&gt;position] += (1u &lt;&lt; (<span class="dv">32</span> - <span class="dv">8</span> * (len % <span class="dv">4</span>) - <span class="dv">1</span>));

  <span class="co">// Calculate how many zeroes is needed.</span>
  remainder = (len * <span class="dv">8</span>) % <span class="dv">512</span>;
  <span class="cf">if</span> (remainder &gt; <span class="dv">447</span>) { <span class="co">// Get a new block</span>
    p-&gt;next = new_message_block();
    p = p-&gt;next;
  }

  <span class="co">// Convert the length to count of binary.</span>
  len *= <span class="dv">8</span>;

  p-&gt;block[<span class="dv">14</span>] = (<span class="dt">uint32_t</span>) len &gt;&gt; <span class="dv">16</span>;
  p-&gt;block[<span class="dv">15</span>] = (<span class="dt">uint32_t</span>) len;

  <span class="cf">return</span> head;
}


<span class="kw">struct</span> message_schedule * compute_message_schedule(<span class="kw">struct</span> message_block *mb) {
  <span class="dt">uint8_t</span> i;
  <span class="kw">struct</span> message_schedule *ms;

  <span class="cf">if</span> (mb == NULL)
    <span class="cf">return</span> NULL;

  ms = new_message_schedule();
  <span class="cf">for</span> (i = <span class="dv">0</span>; i &lt; <span class="dv">16</span>; i++) {
    ms-&gt;block[i] = mb-&gt;block[i];
  }

  <span class="cf">for</span> (i = <span class="dv">16</span>; i &lt; <span class="dv">64</span>; i++) {
    ms-&gt;block[i] = hash_sigma_1(ms-&gt;block[i - <span class="dv">2</span>]) + ms-&gt;block[i - <span class="dv">7</span>] + hash_sigma_0(ms-&gt;block[i - <span class="dv">15</span>]) + ms-&gt;block[i - <span class="dv">16</span>];
  }

  ms-&gt;next = compute_message_schedule(mb-&gt;next);

  <span class="cf">return</span> ms;
}

<span class="kw">struct</span> hash * perform_hash(<span class="kw">struct</span> hash *hash, <span class="kw">struct</span> message_schedule *m) {
  <span class="cf">if</span> (m == NULL) <span class="cf">return</span> hash;

  <span class="dt">uint32_t</span> a, b, c, d, e, f, g, h, tx, ty;
  <span class="dt">uint8_t</span> i;

  a = hash-&gt;value[<span class="dv">0</span>];
  b = hash-&gt;value[<span class="dv">1</span>];
  c = hash-&gt;value[<span class="dv">2</span>];
  d = hash-&gt;value[<span class="dv">3</span>];
  e = hash-&gt;value[<span class="dv">4</span>];
  f = hash-&gt;value[<span class="dv">5</span>];
  g = hash-&gt;value[<span class="dv">6</span>];
  h = hash-&gt;value[<span class="dv">7</span>];

  <span class="cf">for</span> (i = <span class="dv">0</span>; i &lt; <span class="dv">64</span>; i++) {
    tx = h + hash_sum_1(e) + hash_ch(e, f, g) + CUBE_ROOT_256[i] + m-&gt;block[i];
    ty = hash_sum_0(a) + hash_maj(a, b, c);
    h = g;
    g = f;
    f = e;
    e = d + tx;
    d = c;
    c = b;
    b = a;
    a = tx + ty;
  }

  hash-&gt;value[<span class="dv">0</span>] += a;
  hash-&gt;value[<span class="dv">1</span>] += b;
  hash-&gt;value[<span class="dv">2</span>] += c;
  hash-&gt;value[<span class="dv">3</span>] += d;
  hash-&gt;value[<span class="dv">4</span>] += e;
  hash-&gt;value[<span class="dv">5</span>] += f;
  hash-&gt;value[<span class="dv">6</span>] += g;
  hash-&gt;value[<span class="dv">7</span>] += h;

  <span class="cf">return</span> perform_hash(hash, m-&gt;next);
} 

<span class="dt">void</span> sha256(<span class="dt">const</span> <span class="dt">char</span> *input) {
    <span class="kw">struct</span> message_block *h;
    <span class="kw">struct</span> message_schedule *s;
    <span class="kw">struct</span> hash * hash = calloc(<span class="dv">1</span>, <span class="kw">sizeof</span> *hash);
    <span class="dt">unsigned</span> <span class="dt">int</span> i;

    h = pad_message(input);

    <span class="cf">for</span> (i = <span class="dv">0</span>; i &lt; <span class="dv">8</span>; i++)
      hash-&gt;value[i] = SQUARE_ROOT_256[i];

    s = compute_message_schedule(h);

    hash = perform_hash(hash, s);

    printf(<span class="st">"Hash: "</span>);
    <span class="cf">for</span> (i = <span class="dv">0</span>; i &lt; <span class="dv">8</span>; i++)
      printf(<span class="st">"%8x "</span>, hash-&gt;value[i]);
    printf(<span class="st">"</span><span class="sc">\n</span><span class="st">"</span>);

    free_message_block(h);
}

<span class="dt">int</span> main(<span class="dt">int</span> argc, <span class="dt">char</span> *argv[]) {
    <span class="cf">if</span> (argc == <span class="dv">1</span>) {
    sha256(NULL);
    } <span class="cf">else</span> {
    sha256(argv[<span class="dv">1</span>]);
    }
    
    <span class="cf">return</span> <span class="dv">0</span>;
}</code></pre>
</div>
</article>
</div> <!-- end gi1 -->
<aside class="gi2">
<ul>
<strong>2019</strong><li>7 Jun <a href="index.html?p=778">plkt.io</a></li><li>29 May <a href="index.html?p=774">Using Amplify to launch your first Gatsby app</a></li><li>29 May <a href="index.html?p=768">Immediate broken pipe when connecting via SSH on Gentoo under VMWare Fusion</a></li><li>22 Apr <a href="index.html?p=754">Debugging ebuild failure on Gentoo for lxml</a></li><li>17 Apr <a href="index.html?p=749">Git up and going</a></li><li>29 Mar <a href="index.html?p=741">Using GPG to master your identity (Part 1)</a></li><li>23 Mar <a href="index.html?p=727">Moving a user cron job to a systemd timer</a></li><li>4 Mar <a href="index.html?p=723">Building plkt.io</a></li><li>21 Feb <a href="index.html?p=714">VLAN Primer</a></li><li>6 Feb <a href="index.html?p=707">Creating a disposable dev environment using libvirt</a></li><li>21 Jan <a href="index.html?p=700">Selectively applying changes with Git Stash</a></li><li>9 Jan <a href="index.html?p=690">2019 Goals and Tentatives</a></li><li>4 Jan <a href="index.html?p=680">Fresh Ubuntu 18.04 Install</a></li><li>3 Jan <a href="index.html?p=675">Quickly setting up a local Tiny Tiny RSS instance with Docker</a></li><br /><strong>2018</strong><li>20 Dec <a href="index.html?p=630">Generating smooth sine tone output on iOS</a></li><li>14 Dec <a href="index.html?p=626">Installing Jupyter on macOS Mojave</a></li><li>28 Nov <a href="index.html?p=602">ifconfig Output on macOS Mojave</a></li><li>23 Nov <a href="index.html?p=598">Setting up macOS Mojave</a></li><li>21 Nov <a href="index.html?p=582">Setting up a Docker Pi-hole DNS server for wired and wireless clients</a></li><li>13 May <a href="index.html?p=663">Understanding SHA256 Part 3</a></li><li>12 May <a href="index.html?p=662">Understanding SHA256 Part 2</a></li><li>11 May <a href="index.html?p=661">Understanding SHA256 Part 1</a></li><li>1 Apr <a href="index.html?p=622">Demoscene</a></li><li>1 Jan <a href="index.html?p=624">Running a Bitcoin node</a></li><br /><strong>2016</strong><li>21 Oct <a href="index.html?p=576">Hosting my own blog</a></li><li>4 Aug <a href="index.html?p=544">Creating a video montage with ffmpeg</a></li><br /><strong>2015</strong><li>27 Dec <a href="index.html?p=524">Cloning Logical Volumes on Linux</a></li><li>29 Aug <a href="index.html?p=520">Google public WiFI</a></li><li>29 Aug <a href="index.html?p=508">Arch Linux on Dell M6800</a></li><li>20 Jul <a href="index.html?p=429">iOS 9 Public Beta 1 Changes</a></li><li>19 Apr <a href="index.html?p=492">PDF Minimalist 2015 Calendar for Printing</a></li><br /><strong>2013</strong><li>1 Apr <a href="index.html?p=484">Setting up a git server accessible via ssh</a></li><br /><strong>2012</strong><li>13 Apr <a href="index.html?p=424">Google&#039;s addition of C class stock</a></li><li>1 Mar <a href="index.html?p=405">Backing up your Gmail account using procmail and fetchmail</a></li><li>26 Jan <a href="index.html?p=396">Quickly Attaching USB Devices to VirtualBox Guests using VBoxManage</a></li><br /><strong>2011</strong><li>2 Jun <a href="index.html?p=389">Predictions for iOS 5</a></li><li>10 Feb <a href="index.html?p=385">HP Veer</a></li><br /><strong>2010</strong><li>1 May <a href="index.html?p=378">Getting Started with Symbian Development</a></li><br /><strong>2009</strong><li>2 Nov <a href="index.html?p=373">Printing to a remote printer</a></li><li>10 Sep <a href="index.html?p=369">KDE DPI Issue</a></li><li>22 Aug <a href="index.html?p=365">Sony NWZ-E438F + Video</a></li><li>11 Aug <a href="index.html?p=361">Movies for August 2009</a></li><li>26 Jul <a href="index.html?p=356">Readline</a></li><li>18 Jul <a href="index.html?p=347">Installing Windows XP in VirtualBox</a></li><li>16 Jul <a href="index.html?p=338">Looking Good&#8230;Minimally</a></li><li>3 Jul <a href="index.html?p=335">FreeBSD and Arch Linux</a></li><li>27 Jun <a href="index.html?p=332">Using your Gmail contacts in Mutt</a></li><li>27 Jun <a href="index.html?p=331">Recent Microsoft Developments</a></li><li>25 Jun <a href="index.html?p=318">Budget Intel Gaming Rig ($500)</a></li><li>15 Jun <a href="index.html?p=325">A tired mind cannot comprehend pointer arithmetic</a></li><li>14 Jun <a href="index.html?p=232">Managing gpg keys across multiple computers</a></li><li>1 Jun <a href="index.html?p=313">Elinks advanced URI management</a></li><li>26 May <a href="index.html?p=311">xf86-video-intel-2.6.3 and xorg-server-1.6.1 &#8230; a big fail</a></li><li>24 May <a href="index.html?p=204">Install a GNU/Linux distribution upon a USB Stick</a></li><li>29 Apr <a href="index.html?p=260">Squashing the PITA!</a></li><br /><strong>2008</strong><li>16 Dec <a href="index.html?p=243">Atomicity</a></li><li>16 Dec <a href="index.html?p=247">Changing the default X11 Cursor</a></li><li>9 Dec <a href="index.html?p=238">Using xbindkeys to manage media buttons</a></li><li>8 Dec <a href="index.html?p=242">xf86-video-intel-2.4.3</a></li><li>15 Nov <a href="index.html?p=234">Compiling 2.6.27.6 using the vanilla kernel tree sources</a></li><li>10 Nov <a href="index.html?p=215">MigrationHeuristic</a></li><li>28 Oct <a href="index.html?p=195">Arch Linux and the HP Compaq 2710p</a></li><li>18 Oct <a href="index.html?p=187">Setting up IMAP on Mutt</a></li><li>7 Oct <a href="index.html?p=152">Managing your wireless connection with Wireless Tools for Linux</a></li><li>19 Aug <a href="index.html?p=177">Upgrading to linux-2.6.27-rc3</a></li><li>10 Aug <a href="index.html?p=146">Automatically logout after X is killed</a></li><li>9 Aug <a href="index.html?p=129">Upgrading to catalyst-8.7</a></li><li>8 Aug <a href="index.html?p=123">Upgrading to linux-2.6.27-rc2</a></li><li>4 Aug <a href="index.html?p=106">Upgrading to linux-2.6.27-rc1</a></li><li>1 Aug <a href="index.html?p=86">Customising Email Signatures with Fortune</a></li><li>28 Jul <a href="index.html?p=85">Time Saving Vim Movement Tips</a></li><li>20 Jul <a href="index.html?p=53">Configuring the default prompt (PS1)</a></li><li>15 Jul <a href="index.html?p=45">Adding additional email accounts to your email setup</a></li><li>12 Jul <a href="index.html?p=47">Setting up Mutt</a></li><li>8 Jul <a href="index.html?p=28">Making Diagrams with Xy-pic</a></li><li>7 Jul <a href="index.html?p=26">Changing The Default X Cursor</a></li><li>6 Jul <a href="index.html?p=24">My Desktop &#8211; The Terminal</a></li><li>30 Jun <a href="index.html?p=18">My Desktop &#8211; Music</a></li><li>28 Jun <a href="index.html?p=15">My Desktop &#8211; The Web</a></li><li>26 Jun <a href="index.html?p=8">My Desktop</a></li><li>25 Jun <a href="index.html?p=79">Rationale</a></li></ul> 
</aside>
<footer class="gi3">
<hr />
&copy; 2008 &mdash; 2018 Xocite
</footer>
</div> <!-- end gc -->
</body>
</html>
